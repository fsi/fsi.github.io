{"version":3,"sources":["webpack:///./src/components/Post/Post.jsx","webpack:///./src/components/PostsList.jsx","webpack:///./src/pages/posts.js","webpack:///./.cache/gatsby-browser-entry.js","webpack:///./.cache/public-page-renderer.js","webpack:///./.cache/public-page-renderer-prod.js","webpack:///./src/config/colors.js","webpack:///./src/components/Header/Header.jsx","webpack:///./src/components/Layout.js"],"names":["PostHeader","styled","h3","withConfig","displayName","componentId","PostHeaderDate","small","Post","_ref","title","link","excerpt","date","react_default","a","createElement","gatsby_browser_entry","to","format","parse","PostsList","query","render","data","Fragment","allMdx","edges","map","node","Post_Post","key","id","fields","slug","frontmatter","postedAt","_1954712177","PostsPage","Layout","href","PostsList_PostsList","__webpack_require__","r","__webpack_exports__","d","graphql","StaticQueryContext","StaticQuery","react__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_0___default","n","prop_types__WEBPACK_IMPORTED_MODULE_1__","prop_types__WEBPACK_IMPORTED_MODULE_1___default","gatsby_link__WEBPACK_IMPORTED_MODULE_2__","gatsby_link__WEBPACK_IMPORTED_MODULE_2___default","_public_page_renderer__WEBPACK_IMPORTED_MODULE_3__","_public_page_renderer__WEBPACK_IMPORTED_MODULE_3___default","_parse_path__WEBPACK_IMPORTED_MODULE_4__","React","createContext","props","Consumer","staticQueryData","children","Error","propTypes","PropTypes","object","string","isRequired","func","m","module","exports","require","default","ProdPageRenderer","location","pageResources","loader","getResourcesForPathnameSync","pathname","InternalPageRenderer","_babel_runtime_helpers_objectSpread__WEBPACK_IMPORTED_MODULE_0___default","json","shape","colors","brand","fade","background","backgroundAlt","bodyText","headerText","Wrapper","header","PartialNavLink","Object","assign","getProps","isPartiallyCurrent","className","LinkContainer","span","Header","activeClassName","Header_PartialNavLink","Helmet_default","site","siteMetadata","meta","name","content","lang","Header_Header","_755544856"],"mappings":"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","file":"component---src-pages-posts-js-d1a0467c419750e8d6b0.js","sourcesContent":["import React from 'react'\nimport { format, parse } from 'date-fns'\nimport { Link } from 'gatsby'\nimport styled from 'styled-components'\n\nconst PostHeader = styled.h3`\n  display: block;\n  align-items: flex-start;\n`\nconst PostHeaderDate = styled.small`\n  font-size: 0.5em;\n  margin-left: 1em;\n  opacity: 0.5;\n  &:before {\n    content: '[';\n  }\n  &:after {\n    content: ']';\n  }\n`\n\nexport const Post = ({ title, link, excerpt, date }) => {\n  return (\n    <article>\n      <PostHeader>\n        <Link to={link}>{title || 'Untitled post'}</Link>\n        <PostHeaderDate>{format(parse(date), 'MM/DD/YYYY HH:mm')}</PostHeaderDate>\n      </PostHeader>\n      <p>{excerpt}</p>\n    </article>\n  )\n}\n","import React from 'react'\nimport { StaticQuery, graphql } from 'gatsby'\nimport { Post } from '../components/Post'\n\nconst postsQuery = graphql`\n  query {\n    allMdx(sort: {fields: [frontmatter___postedAt]}, filter: {frontmatter: {draft: {ne: true}}}) {\n      edges {\n        node {\n          id\n          fields {\n            slug\n          }\n          frontmatter {\n            title\n            postedAt\n          }\n          excerpt\n        }\n      }\n    }\n  }\n`\n\nexport const PostsList = () => {\n  return (\n    <StaticQuery\n      query={postsQuery}\n      render={(data) => (\n        <>\n          {data.allMdx.edges.map(({ node }) => (\n            <Post\n              key={node.id}\n              link={node.fields.slug}\n              title={node.frontmatter.title}\n              date={node.frontmatter.postedAt}\n              excerpt={node.excerpt}\n            />\n          ))}\n        </>\n      )}\n    />\n  )\n}\n","import React from 'react'\nimport Layout from '../components/Layout'\nimport { PostsList } from '../components/PostsList'\n\nconst PostsPage = () => (\n  <Layout>\n    <h2>Blog</h2>\n    <aside>\n      <ul>\n        <li><a href='/rss'>RSS feed</a></li>\n        <li><a href='/atom'>Atom feed</a></li>\n      </ul>\n    </aside>\n    <PostsList />\n  </Layout>\n)\n\nexport default PostsPage\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\nimport Link, {\n  withPrefix,\n  navigate,\n  push,\n  replace,\n  navigateTo,\n} from \"gatsby-link\"\nimport PageRenderer from \"./public-page-renderer\"\nimport parsePath from \"./parse-path\"\n\nconst StaticQueryContext = React.createContext({})\n\nconst StaticQuery = props => (\n  <StaticQueryContext.Consumer>\n    {staticQueryData => {\n      if (\n        props.data ||\n        (staticQueryData[props.query] && staticQueryData[props.query].data)\n      ) {\n        return (props.render || props.children)(\n          props.data ? props.data.data : staticQueryData[props.query].data\n        )\n      } else {\n        return <div>Loading (StaticQuery)</div>\n      }\n    }}\n  </StaticQueryContext.Consumer>\n)\n\nStaticQuery.propTypes = {\n  data: PropTypes.object,\n  query: PropTypes.string.isRequired,\n  render: PropTypes.func,\n  children: PropTypes.func,\n}\n\nfunction graphql() {\n  throw new Error(\n    `It appears like Gatsby is misconfigured. Gatsby related \\`graphql\\` calls ` +\n      `are supposed to only be evaluated at compile time, and then compiled away,. ` +\n      `Unfortunately, something went wrong and the query was left in the compiled code.\\n\\n.` +\n      `Unless your site has a complex or custom babel/Gatsby configuration this is likely a bug in Gatsby.`\n  )\n}\n\nexport {\n  Link,\n  withPrefix,\n  graphql,\n  parsePath,\n  navigate,\n  push, // TODO replace for v3\n  replace, // TODO remove replace for v3\n  navigateTo, // TODO: remove navigateTo for v3\n  StaticQueryContext,\n  StaticQuery,\n  PageRenderer,\n}\n","const preferDefault = m => (m && m.default) || m\n\nif (process.env.BUILD_STAGE === `develop`) {\n  module.exports = preferDefault(require(`./public-page-renderer-dev`))\n} else if (process.env.BUILD_STAGE === `build-javascript`) {\n  module.exports = preferDefault(require(`./public-page-renderer-prod`))\n} else {\n  module.exports = () => null\n}\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\n\nimport InternalPageRenderer from \"./page-renderer\"\nimport loader from \"./loader\"\n\nconst ProdPageRenderer = ({ location }) => {\n  const pageResources = loader.getResourcesForPathnameSync(location.pathname)\n  return React.createElement(InternalPageRenderer, {\n    location,\n    pageResources,\n    ...pageResources.json,\n  })\n}\n\nProdPageRenderer.propTypes = {\n  location: PropTypes.shape({\n    pathname: PropTypes.string.isRequired,\n  }).isRequired,\n}\n\nexport default ProdPageRenderer\n","export const colors = {\n  brand: '#da5f51',\n  fade: '#848586',\n  background: '#eee0cb',\n  backgroundAlt: '#baa898',\n  bodyText: '#280003',\n  headerText: '#da5f51'\n}\n\nexport default colors\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Link } from 'gatsby'\nimport { colors } from '../../config/colors'\n\nconst Wrapper = styled.header`\n  max-width: 720px;\n  left: 0;\n  right: 0;\n  margin: 0 auto;\n  padding: 0 1rem;\n`\nconst PartialNavLink = props => (\n  <Link\n    getProps={({ isPartiallyCurrent }) => {\n      return isPartiallyCurrent ? { className: 'active' } : null\n    }}\n    {...props}\n  />\n)\nconst LinkContainer = styled.span`\n  display: inline-block;\n  font-size: 1rem;\n  margin: 1rem 1rem 1rem 0;\n  & .active {\n    font-weight: bold;\n    color: ${colors.brand}\n  }\n`\n\nexport const Header = (props) => {\n  return (\n    <Wrapper>\n      <nav>\n        <LinkContainer>\n          <Link to='/' activeClassName='active'>/home/fsi</Link>\n        </LinkContainer>\n        <LinkContainer>\n          <PartialNavLink to='/posts' activeClassName='active'>~/posts</PartialNavLink>\n        </LinkContainer>\n        <LinkContainer>\n          <strike><a href='/cv.en.html'>~/hire</a></strike>\n        </LinkContainer>\n      </nav>\n    </Wrapper>\n  )\n}\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport Helmet from 'react-helmet'\nimport { Header } from './Header'\nimport { StaticQuery, graphql } from 'gatsby'\n\nimport './layout.scss'\n\nexport const Layout = ({ children, location }) => (\n  <StaticQuery\n    query={graphql`\n      query SiteTitleQuery {\n        site {\n          siteMetadata {\n            title\n          }\n        }\n      }\n    `}\n    render={data => (\n      <>\n        <Helmet\n          title={data.site.siteMetadata.title}\n          meta={[\n            { name: 'description', content: 'Sample' },\n            { name: 'keywords', content: 'sample, something' }\n          ]}\n        >\n          <html lang='en' />\n        </Helmet>\n        <Header />\n        <main>\n          {children}\n        </main>\n      </>\n    )}\n  />\n)\n\nLayout.propTypes = {\n  children: PropTypes.node.isRequired\n}\n\nexport default Layout\n"],"sourceRoot":""}